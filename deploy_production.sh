#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Axenta Backend –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
# –ê–≤—Ç–æ—Ä: ProfMonitor Team
# –í–µ—Ä—Å–∏—è: 1.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "================================================================"
    echo "üöÄ AXENTA BACKEND PRODUCTION DEPLOYMENT"
    echo "================================================================"
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
        print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS $VER"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        apt update
        apt install -y git curl wget nginx postgresql postgresql-contrib supervisor ufw fail2ban
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"Red Hat"* ]]; then
        yum update -y
        yum install -y git curl wget nginx postgresql postgresql-server postgresql-contrib supervisor firewalld
    else
        print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS"
        exit 1
    fi
    
    print_success "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go
install_go() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Go
    if command -v go &> /dev/null; then
        GO_VERSION=$(go version | awk '{print $3}')
        print_info "Go —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $GO_VERSION"
        return
    fi
    
    cd /tmp
    wget -q https://go.dev/dl/go1.21.5.linux-amd64.tar.gz
    tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ PATH –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile
    export PATH=$PATH:/usr/local/go/bin
    
    print_success "Go —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(go version)"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
create_app_user() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    if id "axenta" &>/dev/null; then
        print_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å axenta —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        useradd -m -s /bin/bash axenta
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å axenta —Å–æ–∑–¥–∞–Ω"
    fi
    
    mkdir -p /opt/axenta
    chown axenta:axenta /opt/axenta
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
setup_postgresql() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–¥–ª—è CentOS)
    if [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"Red Hat"* ]]; then
        if [[ ! -f /var/lib/pgsql/data/postgresql.conf ]]; then
            postgresql-setup initdb
        fi
    fi
    
    systemctl start postgresql
    systemctl enable postgresql
    
    # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –ë–î
    read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î axenta_user: " DB_PASSWORD
    echo
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sudo -u postgres psql << EOF
CREATE DATABASE axenta_db;
CREATE USER axenta_user WITH PASSWORD '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON DATABASE axenta_db TO axenta_user;
ALTER USER axenta_user CREATEDB;
\q
EOF
    
    print_success "PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    echo "$DB_PASSWORD" > /tmp/db_password
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    if [[ -d /opt/axenta/backend ]]; then
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /opt/axenta/backend —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º..."
        cd /opt/axenta/backend
        sudo -u axenta git pull origin main
    else
        sudo -u axenta git clone https://github.com/novaconnectkz/backend_axenta.git /opt/axenta/backend
    fi
    
    print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
create_env_file() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    DB_PASSWORD=$(cat /tmp/db_password)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ JWT —Å–µ–∫—Ä–µ—Ç–∞
    JWT_SECRET=$(openssl rand -base64 32)
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è CORS (–Ω–∞–ø—Ä–∏–º–µ—Ä: yourdomain.com): " DOMAIN_NAME
    
    sudo -u axenta tee /opt/axenta/backend/.env << EOF
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
APP_ENV=production
APP_PORT=8080
APP_HOST=0.0.0.0

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_HOST=localhost
DB_PORT=5432
DB_NAME=axenta_db
DB_USER=axenta_user
DB_PASSWORD=$DB_PASSWORD
DB_SSLMODE=require

# JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
JWT_SECRET=$JWT_SECRET
JWT_EXPIRES_IN=24h

# Axenta Cloud API
AXENTA_API_URL=https://axenta.cloud/api
AXENTA_TIMEOUT=30s

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=info
LOG_FORMAT=json

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CORS_ALLOWED_ORIGINS=https://$DOMAIN_NAME,https://www.$DOMAIN_NAME
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=Content-Type,Authorization

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=1m
MAX_REQUEST_SIZE=10MB

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
HEALTH_CHECK_PATH=/health
METRICS_PATH=/metrics
EOF
    
    chmod 600 /opt/axenta/backend/.env
    chown axenta:axenta /opt/axenta/backend/.env
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª–µ–º
    rm -f /tmp/db_password
    
    print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application() {
    print_info "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    cd /opt/axenta/backend
    sudo -u axenta /usr/local/go/bin/go mod download
    sudo -u axenta /usr/local/go/bin/go mod verify
    sudo -u axenta /usr/local/go/bin/go build -ldflags="-w -s" -o axenta_backend main.go
    chmod +x axenta_backend
    
    print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±—ã
create_systemd_service() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±—ã..."
    
    tee /etc/systemd/system/axenta-backend.service << EOF
[Unit]
Description=Axenta CRM Backend Service
After=network.target postgresql.service
Wants=postgresql.service

[Service]
Type=simple
User=axenta
Group=axenta
WorkingDirectory=/opt/axenta/backend
ExecStart=/opt/axenta/backend/axenta_backend
ExecReload=/bin/kill -HUP \$MAINPID
KillMode=mixed
KillSignal=SIGINT
TimeoutStopSec=5
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/opt/axenta
NoNewPrivileges=true

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ–µ
Restart=always
RestartSec=5
StartLimitInterval=60
StartLimitBurst=3

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier=axenta-backend

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
    systemctl enable axenta-backend
    
    print_success "Systemd —Å–ª—É–∂–±–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
setup_nginx() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–æ–º–µ–Ω–∞ –¥–ª—è API
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω –¥–ª—è API (–Ω–∞–ø—Ä–∏–º–µ—Ä: api.yourdomain.com): " API_DOMAIN
    
    tee /etc/nginx/sites-available/axenta-backend << EOF
# Rate limiting
limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone \$binary_remote_addr zone=auth:10m rate=5r/s;

# Upstream backend
upstream axenta_backend {
    server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

server {
    listen 80;
    server_name $API_DOMAIN;
    
    # Redirect HTTP to HTTPS (–±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è SSL)
    # return 301 https://\$server_name\$request_uri;
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HTTP (–¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è SSL)
    location / {
        proxy_pass http://axenta_backend;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ln -sf /etc/nginx/sites-available/axenta-backend /etc/nginx/sites-enabled/
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    rm -f /etc/nginx/sites-enabled/default
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    nginx -t
    systemctl enable nginx
    systemctl restart nginx
    
    print_success "Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    echo "API_DOMAIN=$API_DOMAIN" > /tmp/api_domain
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        ufw allow 22/tcp
        ufw allow 80/tcp
        ufw allow 443/tcp
        ufw --force enable
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"Red Hat"* ]]; then
        systemctl enable firewalld
        systemctl start firewalld
        firewall-cmd --permanent --add-service=ssh
        firewall-cmd --permanent --add-service=http
        firewall-cmd --permanent --add-service=https
        firewall-cmd --reload
    fi
    
    print_success "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban
setup_fail2ban() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban..."
    
    systemctl enable fail2ban
    systemctl start fail2ban
    
    print_success "Fail2ban –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
create_maintenance_scripts() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è..."
    
    # –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    tee /opt/axenta/backup.sh << 'EOF'
#!/bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BACKUP_DIR="/opt/axenta/backups"
DB_NAME="axenta_db"
DB_USER="axenta_user"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/axenta_db_$DATE.sql"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
mkdir -p $BACKUP_DIR

# –ß—Ç–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏–∑ .env —Ñ–∞–π–ª–∞
DB_PASSWORD=$(grep "DB_PASSWORD=" /opt/axenta/backend/.env | cut -d'=' -f2)

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î..."
PGPASSWORD=$DB_PASSWORD pg_dump -h localhost -U $DB_USER $DB_NAME > $BACKUP_FILE

# –°–∂–∞—Ç–∏–µ
gzip $BACKUP_FILE

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find $BACKUP_DIR -name "*.sql.gz" -mtime +30 -delete

echo "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_FILE.gz"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    tee /opt/axenta/update.sh << 'EOF'
#!/bin/bash

echo "–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Axenta Backend..."

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cd /opt/axenta/backend

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
sudo -u axenta cp axenta_backend axenta_backend.backup

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
sudo -u axenta git fetch origin
sudo -u axenta git checkout main
sudo -u axenta git pull origin main

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
sudo -u axenta /usr/local/go/bin/go mod download

# –°–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
sudo -u axenta /usr/local/go/bin/go build -ldflags="-w -s" -o axenta_backend.new main.go

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã
systemctl stop axenta-backend

# –ó–∞–º–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
sudo -u axenta mv axenta_backend.new axenta_backend
sudo -u axenta chmod +x axenta_backend

# –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
systemctl start axenta-backend

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
sleep 5
if systemctl is-active --quiet axenta-backend; then
    echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!"
    sudo -u axenta rm -f axenta_backend.backup
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
    systemctl stop axenta-backend
    sudo -u axenta mv axenta_backend.backup axenta_backend
    systemctl start axenta-backend
    exit 1
fi
EOF
    
    chmod +x /opt/axenta/backup.sh
    chmod +x /opt/axenta/update.sh
    chown axenta:axenta /opt/axenta/backup.sh
    chown axenta:axenta /opt/axenta/update.sh
    
    print_success "–°–∫—Ä–∏–ø—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –∑–∞–¥–∞—á
setup_cron() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á..."
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ crontab –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è axenta
    sudo -u axenta crontab << 'EOF'
# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 2:00
0 2 * * * /opt/axenta/backup.sh

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –≤ 3:00 –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
0 3 * * 0 find /var/log/nginx -name "*.log" -mtime +7 -delete
EOF
    
    print_success "Cron –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±
start_services() {
    print_info "–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±..."
    
    systemctl start axenta-backend
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    sleep 3
    if systemctl is-active --quiet axenta-backend; then
        print_success "Axenta Backend –∑–∞–ø—É—â–µ–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Axenta Backend"
        journalctl -u axenta-backend -n 20
        exit 1
    fi
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_check() {
    print_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞
    if curl -f http://localhost:8080/health &>/dev/null; then
        print_success "API –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"
    else
        print_error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if sudo -u axenta psql -h localhost -U axenta_user -d axenta_db -c "SELECT 1;" &>/dev/null; then
        print_success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"
    fi
}

# –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    API_DOMAIN=$(cat /tmp/api_domain | cut -d'=' -f2)
    rm -f /tmp/api_domain
    
    print_header
    print_success "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
    echo -e "${NC}"
    
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
    echo "   üåê API URL: http://$API_DOMAIN"
    echo "   üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL (axenta_db)"
    echo "   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: axenta"
    echo "   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: /opt/axenta/backend"
    echo ""
    
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–æ–π:"
    echo "   sudo systemctl status axenta-backend"
    echo "   sudo systemctl restart axenta-backend"
    echo "   sudo journalctl -u axenta-backend -f"
    echo ""
    
    echo "üìä –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:"
    echo "   –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: /opt/axenta/backup.sh"
    echo "   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: /opt/axenta/update.sh"
    echo ""
    
    echo "üîê –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –¥–ª—è –¥–æ–º–µ–Ω–∞ $API_DOMAIN"
    echo "   2. –ü–æ–ª—É—á–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: sudo certbot --nginx -d $API_DOMAIN"
    echo "   3. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ HTTPS redirect –≤ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API endpoints"
    echo ""
    
    print_success "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: /opt/axenta/backend/PRODUCTION_DEPLOY.md"
    echo -e "${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    check_root
    check_os
    install_dependencies
    install_go
    create_app_user
    setup_postgresql
    clone_repository
    create_env_file
    build_application
    create_systemd_service
    setup_nginx
    setup_firewall
    setup_fail2ban
    create_maintenance_scripts
    setup_cron
    start_services
    final_check
    show_final_info
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
