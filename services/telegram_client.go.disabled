package services

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"

	"backend_axenta/models"
)

// TelegramClient –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
type TelegramClient struct {
	bot       *tgbotapi.BotAPI
	db        *gorm.DB
	companyID uint
	settings  *models.NotificationSettings
}

// NewTelegramClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
func NewTelegramClient(db *gorm.DB, companyID uint) (*TelegramClient, error) {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
	var settings models.NotificationSettings
	err := db.Where("company_id = ?", companyID).First(&settings).Error
	if err != nil {
		return nil, fmt.Errorf("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ %d: %w", companyID, err)
	}

	if !settings.TelegramEnabled || settings.TelegramBotToken == "" {
		return nil, fmt.Errorf("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ %d", companyID)
	}

	// –°–æ–∑–¥–∞–µ–º Bot API –∫–ª–∏–µ–Ω—Ç
	bot, err := tgbotapi.NewBotAPI(settings.TelegramBotToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: %w", err)
	}

	// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º debug
	bot.Debug = false

	log.Printf("‚úÖ Telegram –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: %s", bot.Self.UserName)

	return &TelegramClient{
		bot:       bot,
		db:        db,
		companyID: companyID,
		settings:  &settings,
	}, nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (tc *TelegramClient) SendMessage(chatID string, message string) (*tgbotapi.Message, error) {
	// –ü–∞—Ä—Å–∏–º chat ID
	chatIDInt, err := strconv.ParseInt(chatID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π chat ID: %s", chatID)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatIDInt, message)
	msg.ParseMode = tgbotapi.ModeHTML

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	sentMsg, err := tc.bot.Send(msg)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	return &sentMsg, nil
}

// SendMessageWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (tc *TelegramClient) SendMessageWithKeyboard(chatID string, message string, keyboard [][]InlineKeyboardButton) (*tgbotapi.Message, error) {
	chatIDInt, err := strconv.ParseInt(chatID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π chat ID: %s", chatID)
	}

	msg := tgbotapi.NewMessage(chatIDInt, message)
	msg.ParseMode = tgbotapi.ModeHTML

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	if len(keyboard) > 0 {
		var inlineKeyboard [][]tgbotapi.InlineKeyboardButton
		for _, row := range keyboard {
			var keyboardRow []tgbotapi.InlineKeyboardButton
			for _, button := range row {
				btn := tgbotapi.NewInlineKeyboardButtonData(button.Text, button.CallbackData)
				if button.URL != "" {
					btn = tgbotapi.NewInlineKeyboardButtonURL(button.Text, button.URL)
				}
				keyboardRow = append(keyboardRow, btn)
			}
			inlineKeyboard = append(inlineKeyboard, keyboardRow)
		}
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(inlineKeyboard...)
	}

	sentMsg, err := tc.bot.Send(msg)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: %w", err)
	}

	return &sentMsg, nil
}

// InlineKeyboardButton –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type InlineKeyboardButton struct {
	Text         string `json:"text"`
	CallbackData string `json:"callback_data,omitempty"`
	URL          string `json:"url,omitempty"`
}

// EditMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (tc *TelegramClient) EditMessage(chatID string, messageID int, newText string) error {
	chatIDInt, err := strconv.ParseInt(chatID, 10, 64)
	if err != nil {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π chat ID: %s", chatID)
	}

	edit := tgbotapi.NewEditMessageText(chatIDInt, messageID, newText)
	edit.ParseMode = tgbotapi.ModeHTML

	_, err = tc.bot.Send(edit)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	return nil
}

// DeleteMessage —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (tc *TelegramClient) DeleteMessage(chatID string, messageID int) error {
	chatIDInt, err := strconv.ParseInt(chatID, 10, 64)
	if err != nil {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π chat ID: %s", chatID)
	}

	delete := tgbotapi.NewDeleteMessage(chatIDInt, messageID)
	_, err = tc.bot.Send(delete)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	return nil
}

// SetWebhook —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (tc *TelegramClient) SetWebhook(webhookURL string) error {
	webhook, err := tgbotapi.NewWebhook(webhookURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook: %w", err)
	}

	_, err = tc.bot.Request(webhook)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: %w", err)
	}

	log.Printf("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", webhookURL)
	return nil
}

// RemoveWebhook —É–¥–∞–ª—è–µ—Ç webhook
func (tc *TelegramClient) RemoveWebhook() error {
	_, err := tc.bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: %w", err)
	}

	log.Println("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
	return nil
}

// GetUpdates –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ polling (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ webhook)
func (tc *TelegramClient) GetUpdates() (tgbotapi.UpdatesChannel, error) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tc.bot.GetUpdatesChan(u)
	return updates, nil
}

// ProcessUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
func (tc *TelegramClient) ProcessUpdate(update tgbotapi.Update) error {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message != nil {
		return tc.processMessage(update.Message)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
	if update.CallbackQuery != nil {
		return tc.processCallbackQuery(update.CallbackQuery)
	}

	return nil
}

// processMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (tc *TelegramClient) processMessage(message *tgbotapi.Message) error {
	chatID := strconv.FormatInt(message.Chat.ID, 10)
	text := message.Text

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (ID: %s): %s", message.From.UserName, chatID, text)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if strings.HasPrefix(text, "/") {
		return tc.processCommand(chatID, text, message)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—Ç—ã
	return tc.processUserResponse(chatID, text, message)
}

// processCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (tc *TelegramClient) processCommand(chatID, command string, message *tgbotapi.Message) error {
	switch command {
	case "/start":
		return tc.handleStartCommand(chatID, message)
	case "/help":
		return tc.handleHelpCommand(chatID)
	case "/status":
		return tc.handleStatusCommand(chatID, message)
	case "/settings":
		return tc.handleSettingsCommand(chatID, message)
	default:
		_, err := tc.SendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		return err
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (tc *TelegramClient) handleStartCommand(chatID string, message *tgbotapi.Message) error {
	welcomeText := fmt.Sprintf(`üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Axenta CRM!</b>

–Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏.

–í–∞—à Telegram ID: <code>%s</code>

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`, chatID)

	_, err := tc.SendMessage(chatID, welcomeText)
	return err
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (tc *TelegramClient) handleHelpCommand(chatID string) error {
	helpText := `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
üîß –ú–æ–Ω—Ç–∞–∂–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
üí∞ –ë–∏–ª–ª–∏–Ω–≥ –∏ –ø–ª–∞—Ç–µ–∂–∏
üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`

	_, err := tc.SendMessage(chatID, helpText)
	return err
}

// handleStatusCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (tc *TelegramClient) handleStatusCommand(chatID string, message *tgbotapi.Message) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —Å–∏—Å—Ç–µ–º–µ
	var user models.User
	err := tc.db.Where("telegram_id = ? AND company_id = ?", chatID, tc.companyID).First(&user).Error

	var statusText string
	if err != nil {
		statusText = `‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω</b>

–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ.
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

–í–∞—à Telegram ID: <code>` + chatID + `</code>`
	} else {
		statusText = fmt.Sprintf(`‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s
Email: %s
–°—Ç–∞—Ç—É—Å: %s

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç.`,
			user.FirstName, user.LastName, user.Email,
			map[bool]string{true: "–ê–∫—Ç–∏–≤–µ–Ω", false: "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}[user.IsActive])
	}

	_, err = tc.SendMessage(chatID, statusText)
	return err
}

// handleSettingsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /settings
func (tc *TelegramClient) handleSettingsCommand(chatID string, message *tgbotapi.Message) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	var user models.User
	err := tc.db.Where("telegram_id = ? AND company_id = ?", chatID, tc.companyID).First(&user).Error
	if err != nil {
		_, sendErr := tc.SendMessage(chatID, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return sendErr
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var prefs models.UserNotificationPreferences
	err = tc.db.Where("user_id = ?", user.ID).First(&prefs).Error
	if err != nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		prefs = models.UserNotificationPreferences{
			UserID:                user.ID,
			TelegramEnabled:       true,
			EmailEnabled:          true,
			SMSEnabled:            false,
			InstallationReminders: true,
			InstallationUpdates:   true,
			BillingAlerts:         true,
			WarehouseAlerts:       true,
			SystemNotifications:   true,
			CompanyID:             tc.companyID,
		}
		tc.db.Create(&prefs)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
	keyboard := [][]InlineKeyboardButton{
		{{Text: fmt.Sprintf("Telegram: %s", map[bool]string{true: "‚úÖ", false: "‚ùå"}[prefs.TelegramEnabled]), CallbackData: "toggle_telegram"}},
		{{Text: fmt.Sprintf("Email: %s", map[bool]string{true: "‚úÖ", false: "‚ùå"}[prefs.EmailEnabled]), CallbackData: "toggle_email"}},
		{{Text: fmt.Sprintf("–ú–æ–Ω—Ç–∞–∂–∏: %s", map[bool]string{true: "‚úÖ", false: "‚ùå"}[prefs.InstallationReminders]), CallbackData: "toggle_installations"}},
		{{Text: fmt.Sprintf("–ë–∏–ª–ª–∏–Ω–≥: %s", map[bool]string{true: "‚úÖ", false: "‚ùå"}[prefs.BillingAlerts]), CallbackData: "toggle_billing"}},
		{{Text: fmt.Sprintf("–°–∫–ª–∞–¥: %s", map[bool]string{true: "‚úÖ", false: "‚ùå"}[prefs.WarehouseAlerts]), CallbackData: "toggle_warehouse"}},
		{{Text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", CallbackData: "refresh_settings"}},
	}

	settingsText := `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:

–¢–∏—Ö–∏–µ —á–∞—Å—ã: ` + prefs.QuietHoursStart + ` - ` + prefs.QuietHoursEnd + `
–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ` + prefs.Timezone

	_, err = tc.SendMessageWithKeyboard(chatID, settingsText, keyboard)
	return err
}

// processCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
func (tc *TelegramClient) processCallbackQuery(query *tgbotapi.CallbackQuery) error {
	chatID := strconv.FormatInt(query.Message.Chat.ID, 10)
	data := query.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	callback := tgbotapi.NewCallback(query.ID, "")
	tc.bot.Request(callback)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var user models.User
	err := tc.db.Where("telegram_id = ? AND company_id = ?", chatID, tc.companyID).First(&user).Error
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var prefs models.UserNotificationPreferences
	err = tc.db.Where("user_id = ?", user.ID).First(&prefs).Error
	if err != nil {
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
	switch data {
	case "toggle_telegram":
		prefs.TelegramEnabled = !prefs.TelegramEnabled
	case "toggle_email":
		prefs.EmailEnabled = !prefs.EmailEnabled
	case "toggle_installations":
		prefs.InstallationReminders = !prefs.InstallationReminders
	case "toggle_billing":
		prefs.BillingAlerts = !prefs.BillingAlerts
	case "toggle_warehouse":
		prefs.WarehouseAlerts = !prefs.WarehouseAlerts
	case "refresh_settings":
		// –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	tc.db.Save(&prefs)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	return tc.handleSettingsCommand(chatID, query.Message)
}

// processUserResponse –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (tc *TelegramClient) processUserResponse(chatID, text string, message *tgbotapi.Message) error {
	// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	log.Printf("–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", chatID, text)

	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω—Ç–∞–∂–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç.–¥.

	// –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err := tc.SendMessage(chatID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
	return err
}

// GetBotInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
func (tc *TelegramClient) GetBotInfo() (*tgbotapi.User, error) {
	return &tc.bot.Self, nil
}

// IsHealthy –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç
func (tc *TelegramClient) IsHealthy() bool {
	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
	_, err := tc.bot.GetMe()
	return err == nil
}
